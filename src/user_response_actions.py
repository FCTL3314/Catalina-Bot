import aiogram
import src
import random
import connectors
import create_bot


def get_random_translated_word(message: aiogram.types.Message) -> str:
    """
    Gets the predetermined random translated word, using [f"ran_num: {update.message.from_user.id}"] as a
    specific user keyword.
    """
    return create_bot.user_data[f"learning_words_translated: {message.from_user.id}"][
        create_bot.bot_data[f"ran_num: {message.from_user.id}"]]


async def check_answer_correctness(message: aiogram.types.Message):
    """Checks the translated word entered by the user for correctness"""
    if message.text.lower() == get_random_translated_word(message=message).lower():
        await correct_answer_response(message=message)
    else:
        await wrong_answer_response(message=message)


async def correct_answer_response(message: aiogram.types.Message):
    user_score = create_bot.user_data[f'user_score: {message.from_user.id}']
    user_score.increment()
    if await connectors.db_actions.data_base.get_best_score(message=message) < user_score.get_score():
        await connectors.db_actions.data_base.update_best_score(score=user_score.get_score(), message=message)
    await send_correct_answer_message(user_score=user_score, message=message)
    await src.send_random_word.send_random_word(message=message)


async def send_correct_answer_message(user_score, message: aiogram.types.Message):
    if user_score.get_score() <= 20:
        match user_score.get_score():
            case 5:
                await message.answer(text=f'üü¢–í–µ—Ä–Ω–æ!\n–£ —Ç–µ–±—è –Ω–µ –ø–ª–æ—Ö–æ –ø–æ–ª—É—á–∞–µ—Ç—Å—è!',
                                     disable_notification=True)
            case 10:
                await message.answer(text=f'üü¢–í–µ—Ä–Ω–æ!\n–¢—ã —É–∂–µ –Ω–∞ –ø–æ–ª–æ–≤–∏–Ω–µ –ø—É—Ç–∏, –Ω–µ —Ç–µ—Ä—è–π —ç–Ω—Ç—É–∑–∏–∞–∑–º–∞!',
                                     disable_notification=True)
            case 15:
                await message.answer(text=f'üü¢–í–µ—Ä–Ω–æ!\n–ï—â—ë —á—É—Ç—å-—á—É—Ç—å –∏ —Ç—ã –∏—Ö –≤—ã—É—á–∏—à—å! –û—Å—Ç–∞–ª–æ—Å—å —Å–æ–≤—Å–µ–º –Ω–∏—á–µ–≥–æ!',
                                     disable_notification=True)
            case 20:
                await message.answer(text=f'‚úÖ–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –°–ª–æ–≤–∞ –≤—ã—É—á–µ–Ω—ã!\n'
                                          f'–ù–∞–ø–∏—Å–∞–≤ –∫–æ–º–∞–Ω–¥—É /achievements, —Ç—ã —É–≤–∏–¥–∏—à—å –±–∏–±–ª–∏–æ—Ç–µ–∫—É –≤—ã—É—á–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤, '
                                          f'–∞ —Ç–∞–∫ –∂–µ —Å–≤–æ–π –ª—É—á—à–∏–π —Å—á—ë—Ç.\n'
                                          f'–î–∞–ª–µ–µ —Ç—ã –º–æ–∂–µ—à—å —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞—Ç—å —Å–≤–æ—é —Å–µ—Ä–∏—é –≤–µ—Ä–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤, '
                                          f'–ª–∏–±–æ –Ω–∞–ø–∏—Å–∞—Ç—å /stop —á—Ç–æ –±—ã –ø–µ—Ä–µ—Å—Ç–∞—Ç—å –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å.',
                                     disable_notification=True)
                await connectors.db_actions.data_base.add_learned_words(
                    learned_words=create_bot.user_data[f"learning_words: {message.from_user.id}"],
                    message=message)
            case _:
                await message.answer(text=f'üü¢–í–µ—Ä–Ω–æ!', disable_notification=True)
    elif user_score.get_score() > 20:
        await message.answer(
            text=f'üü¢–°–µ—Ä–∏—è –≤–µ—Ä–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: '
                 f'{create_bot.user_data[f"user_score: {message.from_user.id}"].get_score()}!',
            disable_notification=True)


async def wrong_answer_response(message: aiogram.types.Message):
    user_score = create_bot.user_data[f'user_score: {message.from_user.id}']
    await send_wrong_answer_message(user_score=user_score, message=message)
    user_score.reset()
    await src.send_random_word.send_random_word(message=message)


async def send_wrong_answer_message(user_score, message: aiogram.types.Message):
    if 5 <= user_score.get_score() < 15:
        ran_num = random.randint(0, 2)
        match ran_num:
            case 0:
                await message.answer(
                    text=f'üî¥–ù–µ–≤–µ—Ä–Ω–æ.\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç - '
                         f'{get_random_translated_word(message=message)}.\n'
                         f'–î–∞, –∑–Ω–∞—é. –û—à–∏–±–∫–∏ –Ω–µ —Å–∞–º–æ–µ –ø—Ä–∏—è—Ç–Ω–æ–µ —á—É–≤—Å—Ç–≤–æ.',
                    disable_notification=True)
            case 1:
                await message.answer(
                    text=f'üî¥–ù–µ–≤–µ—Ä–Ω–æ.\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç - '
                         f'{get_random_translated_word(message=message)}.\n'
                         f'–ë–µ–∑ –æ—à–∏–±–æ–∫ —ç—Ç–∏ —Å–ª–æ–≤–∞ —É–∂ —Ç–æ—á–Ω–æ –Ω–µ –≤—ã—É—á–∏—Ç—å.',
                    disable_notification=True)
            case 2:
                await message.answer(
                    text=f'üî¥–ù–µ–≤–µ—Ä–Ω–æ.\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç - '
                         f'{get_random_translated_word(message=message)}.\n'
                         f'–¢–µ–ø–µ—Ä—å-—Ç–æ —É–∂ —Ç—ã —Ç–æ—á–Ω–æ –∑–∞–ø–æ–º–Ω–∏—à—å —ç—Ç–æ —Å–ª–æ–≤–æ.',
                    disable_notification=True)
    elif 15 <= user_score.get_score() < 20:
        await message.answer(
            text=f'üî¥–ù–µ–≤–µ—Ä–Ω–æ.\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç - '
                 f'{get_random_translated_word(message=message)}.\n'
                 f'–ù–∏—á–µ–≥–æ —Å—Ç—Ä–∞—à–Ω–æ–≥–æ, —Ç—ã –±—ã–ª –ø–æ—á—Ç–∏ —É —Ü–µ–ª–∏!',
            disable_notification=True)
    elif user_score.get_score() > 20:
        await message.answer(
            text=f'üî¥–ù–µ–≤–µ—Ä–Ω–æ.\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç - '
                 f'{get_random_translated_word(message=message)}.\n'
                 '–ù–∏—á—Ç–æ –≤ –º–∏—Ä–µ –Ω–µ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ, –∫–∞–∫ –∏ —Ç–≤–æ—è —Å–µ—Ä–∏—è –≤–µ—Ä–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤.')
    else:
        await message.answer(
            text=f'üî¥–ù–µ–≤–µ—Ä–Ω–æ.\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç - {get_random_translated_word(message=message)}.',
            disable_notification=True)
