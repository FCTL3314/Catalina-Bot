import aiogram
import data
import utils
import keyboards
import random


async def send_words_accepted_message(learning_words, message: aiogram.types.Message,
                                      state: aiogram.dispatcher.FSMContext):
    """Sends 'words accepted message'. And sends a random word."""
    await message.answer(text='–û–±—Ä–∞–±–æ—Ç–∫–∞...', disable_notification=True)
    learning_words_translated = await utils.misc.translate_learning_words(learning_words=learning_words, state=state)
    accepted_words = ''.join(
        f'{learning_words[i]} - {learning_words_translated[i]}\n' for i in range(len(learning_words)))
    await message.answer(text=f'–°–ª–æ–≤–∞ –ø—Ä–∏–Ω—è—Ç—ã:\n{accepted_words}'
                              f'–ò–∑—ä—è–≤–∏–≤ –∂–µ–ª–∞–Ω–∏–µ –ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å, –Ω–∞–ø–∏—à–∏ /stop.\n'
                              f'–î–∞–ª–µ–µ —Ç–µ–±–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å —Å–ª–æ–≤–∞:',
                         reply_markup=keyboards.default.create_keyboard_markup.create_keyboard_markup(
                             text=learning_words_translated),
                         disable_notification=True)
    await utils.misc.send_message.send_random_word_message(message=message, state=state)


async def send_words_not_accepted_message(learning_words, cause: str, message: aiogram.types.Message):
    match cause:
        case 'InvalidNumberOfWords':
            await message.answer(
                text='–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫:\n'
                     f'–ö–æ–ª-–≤–æ —Ç–≤–æ–∏—Ö —Å–ª–æ–≤ - {len(learning_words)}.',
                disable_notification=True)
        case 'WordsContainNumbers':
            await message.answer(
                text='–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫:\n'
                     '–í–∏–¥–∏–º–æ, –≤ –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö —Ç–æ–±–æ—é —Å–ª–æ–≤–∞—Ö –∏–º–µ—é—Ç—Å—è —Ü–∏—Ñ—Ä—ã.',
                disable_notification=True)
        case 'WordsContainPunctuation':
            await message.answer(
                text='–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫:\n'
                     '–í–∏–¥–∏–º–æ, –≤ –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö —Ç–æ–±–æ—é —Å–ª–æ–≤–∞—Ö –∏–º–µ—é—Ç—Å—è –ø—É–Ω–∫—Ç—É–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã.',
                disable_notification=True)


async def send_random_word_message(message: aiogram.types.Message, state: aiogram.dispatcher.FSMContext,
                                   number_of_words=data.config.NUMBER_OF_WORDS):
    """Send random generated not previous word message"""
    async with state.proxy() as user_data:
        try:
            user_data['ran_num'] = await utils.misc.generate_not_previous_number(previous_number=user_data['ran_num'])
        except KeyError:
            user_data['ran_num'] = random.randint(0, number_of_words - 1)
        bot_data = await state.get_data()
        learning_words = bot_data.get('learning_words')
        ran_num = user_data['ran_num']
    await message.answer(text=f'{learning_words[ran_num]}', disable_notification=True)


async def send_correct_answer_message(user_score, message: aiogram.types.Message):
    if user_score.get_score() <= 20:
        match user_score.get_score():
            case 5:
                await message.answer(text=f'üü¢–í–µ—Ä–Ω–æ!\n–£ —Ç–µ–±—è –Ω–µ –ø–ª–æ—Ö–æ –ø–æ–ª—É—á–∞–µ—Ç—Å—è!',
                                     disable_notification=True)
            case 10:
                await message.answer(text=f'üü¢–í–µ—Ä–Ω–æ!\n–¢—ã —É–∂–µ –Ω–∞ –ø–æ–ª–æ–≤–∏–Ω–µ –ø—É—Ç–∏, –Ω–µ —Ç–µ—Ä—è–π —ç–Ω—Ç—É–∑–∏–∞–∑–º–∞!',
                                     disable_notification=True)
            case 15:
                await message.answer(text=f'üü¢–í–µ—Ä–Ω–æ!\n–ï—â—ë —á—É—Ç—å-—á—É—Ç—å –∏ —Ç—ã –∏—Ö –≤—ã—É—á–∏—à—å! –û—Å—Ç–∞–ª–æ—Å—å —Å–æ–≤—Å–µ–º –Ω–∏—á–µ–≥–æ!',
                                     disable_notification=True)
            case 20:
                await message.answer(text=f'‚úÖ–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –°–ª–æ–≤–∞ –≤—ã—É—á–µ–Ω—ã!\n'
                                          f'–ù–∞–ø–∏—Å–∞–≤ –∫–æ–º–∞–Ω–¥—É /achievements, —Ç—ã —É–≤–∏–¥–∏—à—å –±–∏–±–ª–∏–æ—Ç–µ–∫—É –≤—ã—É—á–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤, '
                                          f'–∞ —Ç–∞–∫ –∂–µ —Å–≤–æ–π –ª—É—á—à–∏–π —Å—á—ë—Ç.\n'
                                          f'–î–∞–ª–µ–µ —Ç—ã –º–æ–∂–µ—à—å —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–æ–≤–∞—Ç—å —Å–≤–æ—é —Å–µ—Ä–∏—é –≤–µ—Ä–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤, '
                                          f'–ª–∏–±–æ –Ω–∞–ø–∏—Å–∞—Ç—å /stop —á—Ç–æ –±—ã –ø–µ—Ä–µ—Å—Ç–∞—Ç—å –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å.',
                                     disable_notification=True)
            case _:
                await message.answer(text=f'üü¢–í–µ—Ä–Ω–æ!', disable_notification=True)
    elif user_score.get_score() > 20:
        await message.answer(
            text=f'üü¢–°–µ—Ä–∏—è –≤–µ—Ä–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {user_score.get_score()}!', disable_notification=True)


async def send_wrong_answer_message(user_score, message: aiogram.types.Message, state: aiogram.dispatcher.FSMContext):
    if 5 <= user_score.get_score() < 15:
        ran_case = random.randint(0, 2)
        match ran_case:
            case 0:
                await message.answer(
                    text=f'üî¥–ù–µ–≤–µ—Ä–Ω–æ.\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç - '
                         f'{await utils.misc.get_random_translated_word(state=state)}.\n'
                         f'–î–∞, –∑–Ω–∞—é. –û—à–∏–±–∫–∏ –Ω–µ —Å–∞–º–æ–µ –ø—Ä–∏—è—Ç–Ω–æ–µ —á—É–≤—Å—Ç–≤–æ.',
                    disable_notification=True)
            case 1:
                await message.answer(
                    text=f'üî¥–ù–µ–≤–µ—Ä–Ω–æ.\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç - '
                         f'{await utils.misc.get_random_translated_word(state=state)}.\n'
                         f'–ë–µ–∑ –æ—à–∏–±–æ–∫ —ç—Ç–∏ —Å–ª–æ–≤–∞ —É–∂ —Ç–æ—á–Ω–æ –Ω–µ –≤—ã—É—á–∏—Ç—å.',
                    disable_notification=True)
            case 2:
                await message.answer(
                    text=f'üî¥–ù–µ–≤–µ—Ä–Ω–æ.\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç - '
                         f'{await utils.misc.get_random_translated_word(state=state)}.\n'
                         f'–¢–µ–ø–µ—Ä—å-—Ç–æ —É–∂ —Ç—ã —Ç–æ—á–Ω–æ –∑–∞–ø–æ–º–Ω–∏—à—å —ç—Ç–æ —Å–ª–æ–≤–æ.',
                    disable_notification=True)
    elif 15 <= user_score.get_score() < 20:
        await message.answer(
            text=f'üî¥–ù–µ–≤–µ—Ä–Ω–æ.\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç - '
                 f'{await utils.misc.get_random_translated_word(state=state)}.\n'
                 f'–ù–∏—á–µ–≥–æ —Å—Ç—Ä–∞—à–Ω–æ–≥–æ, —Ç—ã –±—ã–ª –ø–æ—á—Ç–∏ —É —Ü–µ–ª–∏!',
            disable_notification=True)
    elif user_score.get_score() > 20:
        await message.answer(
            text=f'üî¥–ù–µ–≤–µ—Ä–Ω–æ.\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç - '
                 f'{await utils.misc.get_random_translated_word(state=state)}.\n'
                 '–ù–∏—á—Ç–æ –≤ –º–∏—Ä–µ –Ω–µ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ, –∫–∞–∫ –∏ —Ç–≤–æ—è —Å–µ—Ä–∏—è –≤–µ—Ä–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤.')
    else:
        await message.answer(
            text=f'üî¥–ù–µ–≤–µ—Ä–Ω–æ.\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç - {utils.misc.get_random_translated_word(state=state)}.',
            disable_notification=True)
