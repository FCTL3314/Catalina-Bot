import random
import aiogram
import utils
import keyboards

from data.config import NUMBER_OF_WORDS, CORRECT_ANSWERS_TO_LEARN_WORDS, COUNTER_NUMBERS_TO_SEND_PROGRESS


async def send_words_accepted_message(learning_words, learning_words_translated, message: aiogram.types.Message,
                                      number_of_words=NUMBER_OF_WORDS):
    accepted_words = ''.join(
        f'{learning_words[i]} - {learning_words_translated[i]}\n' for i in range(number_of_words))
    await message.answer(text=f'‚úÖ–°–ª–æ–≤–∞ –ø—Ä–∏–Ω—è—Ç—ã:\n{accepted_words}'
                              f'–ò–∑—ä—è–≤–∏–≤ –∂–µ–ª–∞–Ω–∏–µ –ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å, –Ω–∞–ø–∏—à–∏ /stop.',
                         reply_markup=keyboards.default.create_keyboard_markup.create_keyboard_markup(
                             text=learning_words_translated), disable_notification=True)


async def send_words_contains_learned_words_message(message: aiogram.types.Message):
    await message.answer(text='‚ö†Ô∏è–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∏–∑ —Å–ª–æ–≤ —É–∂–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ —Ç–≤–æ–µ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–µ. '
                              '–°–æ—Ö—Ä–∞–Ω–µ–Ω—ã –±—É–¥—É—Ç —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞.')


async def send_words_not_accepted_message(learning_words, cause: str, message: aiogram.types.Message,
                                          number_of_words=NUMBER_OF_WORDS):
    match cause:
        case 'InvalidNumberOfWords':
            await message.answer(text=f'‚ùó–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫:\n–¢—ã –≤–≤—ë–ª {len(learning_words)} '
                                      f'{"—Å–ª–æ–≤–∞" if 4 >= number_of_words > 1 else "—Å–ª–æ–≤"}, '
                                      f'–≤ —Ç–æ –≤—Ä–µ–º—è, –∫–∞–∫ —Ç—Ä–µ–±—É–µ–º–æ–µ –∫–æ–ª-–≤–æ {number_of_words}.',
                                 disable_notification=True)
        case 'WordsContainNumbers':
            await message.answer(text='‚ùó–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫:\n–í —Ç–≤–æ–∏—Ö —Å–ª–æ–≤–∞—Ö –∏–º–µ—é—Ç—Å—è —Ü–∏—Ñ—Ä—ã.',
                                 disable_notification=True)
        case 'WordsContainPunctuation':
            await message.answer(
                text='‚ùó–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫:\n–í —Ç–≤–æ–∏—Ö —Å–ª–æ–≤–∞—Ö –∏–º–µ—é—Ç—Å—è –ø—É–Ω–∫—Ç—É–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã.',
                disable_notification=True)
        case 'WordsRepeated':
            await message.answer(text='‚ùó–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫:\n–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∏–∑ —Ç–≤–æ–∏—Ö —Å–ª–æ–≤ –ø–æ–≤—Ç–æ—Ä—è—é—Ç—Å—è.')


async def send_random_word_message(message: aiogram.types.Message, state: aiogram.dispatcher.FSMContext,
                                   number_of_words=NUMBER_OF_WORDS):
    """Send random generated not previous word message"""
    async with state.proxy() as user_data:
        if 'ran_num' in user_data:
            user_data['ran_num'] = await utils.misc.generate_not_previous_number(previous_number=user_data['ran_num'])
        else:
            user_data['ran_num'] = random.randint(0, number_of_words - 1)
        learning_words = user_data['learning_words']
        ran_num = user_data['ran_num']
    await message.answer(text=f'{learning_words[ran_num]}', disable_notification=True)


async def send_correct_answer_message(user_counter, message: aiogram.types.Message,
                                      answers_to_learn_words=CORRECT_ANSWERS_TO_LEARN_WORDS,
                                      counter_numbers_to_send_progress=COUNTER_NUMBERS_TO_SEND_PROGRESS):
    if user_counter.get_score() in counter_numbers_to_send_progress:
        words_progress = 1.0 / (answers_to_learn_words / user_counter.get_score())
        await message.answer(text=f'üü¢–í–µ—Ä–Ω–æ!\n‚è´–£—Ä–æ–≤–µ–Ω—å –∏–∑—É—á–µ–Ω–Ω–æ—Å—Ç–∏ —Å–ª–æ–≤ –ø–æ–≤—ã—à–µ–Ω –¥–æ {words_progress:.0%}',
                             disable_notification=True)
    else:
        await message.answer(text=f'üü¢–í–µ—Ä–Ω–æ!', disable_notification=True)


async def send_words_learned_message(message: aiogram.types.Message):
    await message.answer(text=f'üìú–°–ª–æ–≤–∞ –≤—ã—É—á–µ–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ç–≤–æ—é –±–∏–±–ª–∏–æ—Ç–µ–∫—É!',
                         reply_markup=aiogram.types.reply_keyboard.ReplyKeyboardRemove(),
                         disable_notification=True)


async def send_scrabble_achievement_received_message(message: aiogram.types.Message):
    await message.answer(text=f"üèµ–î–æ–±–∞–≤–∏–≤ –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫—É –ø–µ—Ä–≤—ã–µ —Å–ª–æ–≤–∞, —Ç—ã –Ω–∞–≥—Ä–∞–∂–¥–∞–µ—à—å—Å—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ–º üéì–≠—Ä—É–¥–∏—Ç!",
                         disable_notification=True)


async def send_pioneer_achievement_received_message(message: aiogram.types):
    await message.answer(text='üèµ–ó–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞, –Ω–∞—á–∏–Ω–∞—è —Å –µ–≥–æ —Å–∞–º—ã—Ö —Ä–∞–Ω–Ω–∏—Ö –¥–Ω–µ–π, '
                              '—Ç—ã –Ω–∞–≥—Ä–∞–∂–¥–∞–µ—à—å—Å—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ–º üåÑ–ü–µ—Ä–≤–æ–ø—Ä–æ—Ö–æ–¥–µ—Ü!', disable_notification=True)


async def send_wrong_answer_message(user_counter, message: aiogram.types.Message, state: aiogram.dispatcher.FSMContext,
                                    answers_to_learn_words=CORRECT_ANSWERS_TO_LEARN_WORDS,
                                    counter_numbers_to_send_progress=COUNTER_NUMBERS_TO_SEND_PROGRESS):
    wrong_answer_text = f'üî¥–ù–µ–≤–µ—Ä–Ω–æ.\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç - {await utils.misc.get_random_translated_word(state=state)}.\n'
    if user_counter.get_score() in counter_numbers_to_send_progress:
        words_progress = 1.0 / (answers_to_learn_words / user_counter.get_score())
        await message.answer(
            text=f'{wrong_answer_text}‚è¨–£—Ä–æ–≤–µ–Ω—å –∏–∑—É—á–µ–Ω–Ω–æ—Å—Ç–∏ —Å–ª–æ–≤ –ø–æ–Ω–∏–∂–µ–Ω –¥–æ {words_progress:.0%}',
            disable_notification=True)
    else:
        await message.answer(text=f'{wrong_answer_text}', disable_notification=True)


async def send_unable_execute_stop_command_message(message: aiogram.types.Message):
    await message.answer(text='‚ùï–ú–Ω–µ –Ω–µ—á–µ–≥–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å. –ù–∞–ø–∏—à–∏ /set –¥–ª—è –Ω–∞—á–∞–ª–∞.', disable_notification=True)
