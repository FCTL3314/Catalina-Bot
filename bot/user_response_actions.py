import telegram.ext
import bot
import random
import connectors.db_actions

from typing import List


def get_random_translated_word(update: telegram.Update, context: telegram.ext.CallbackContext) -> str:
    """Gets the translated word from context.user_data['learning_words_translated']"""
    translated_word = context.user_data['learning_words_translated'][
        context.bot_data[f"ran_num: {update.message.from_user.id}"]]
    return translated_word


def check_answer_correctness(update: telegram.Update, context: telegram.ext.CallbackContext):
    """Checks the translated word entered by the user for correctness"""
    answer = update.message.text
    if answer.lower() == get_random_translated_word(update=update, context=context).lower():
        correct_answer_response(update=update, context=context)
    else:
        wrong_answer_response(update=update, context=context)


def correct_answer_response(update: telegram.Update, context: telegram.ext.CallbackContext):
    user_score = context.user_data[f'user_score: {update.message.from_user.id}']
    user_score.increment()
    connectors.db_actions.db_update_best_score(score=user_score.get_score(), update=update)
    match user_score.get_score():
        case 5:
            update.message.reply_text(text=f'üü¢5 —Ä–∞–∑ –ø–æ–¥—Ä—è–¥!\n–ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!',
                                      disable_notification=True)
        case 10:
            update.message.reply_text(text=f'üü¢10 —Ä–∞–∑ –ø–æ–¥—Ä—è–¥!\n–¢—ã —É–∂–µ –Ω–∞ –ø–æ–ª–æ–≤–∏–Ω–µ –ø—É—Ç–∏, –æ—Å—Ç–∞–ª–æ—Å—å —Å–æ–≤—Å–µ–º –Ω–∏—á–µ–≥–æ!',
                                      disable_notification=True)
        case 15:
            update.message.reply_text(text=f'üü¢15 —Ä–∞–∑ –ø–æ–¥—Ä—è–¥!\n–ï—â—ë —á—É—Ç—å-—á—É—Ç—å –∏ —Ç—ã –∏—Ö –≤—ã—É—á–∏—à—å! –Ø –≤ —Ç–µ–±—è –≤–µ—Ä—é!',
                                      disable_notification=True)
        case 20:
            update.message.reply_text(text=f'‚úÖ–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢—ã –≤—ã—É—á–∏–ª —Å–ª–æ–≤–∞!\n'
                                           f'–ù–∞–ø–∏—à–∏ /achievements —á—Ç–æ –±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è.',
                                      disable_notification=True)
            connectors.db_actions.db_add_learned_words(
                learned_words=create_words_concatenation(update=update, context=context), update=update)
        case _ if user_score.get_score() > 20:
            update.message.reply_text(
                text=f'üü¢–°–µ—Ä–∏—è –≤–µ—Ä–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤:'
                     f' {context.user_data[f"user_score: {update.message.from_user.id}"].get_score()}!',
                disable_notification=True)
        case _:
            update.message.reply_text(text=f'üü¢–í–µ—Ä–Ω–æ!', disable_notification=True)
    bot.generate_random_word(update=update, context=context)


def create_words_concatenation(update: telegram.Update, context: telegram.ext.CallbackContext) -> List[str]:
    if connectors.db_actions.db_get_learned_words(update=update) is None:
        words_concatenation = context.user_data['learning_words']
    else:
        words_concatenation = context.user_data['learning_words'] + connectors.db_actions.db_get_learned_words(
            update=update)
    return words_concatenation


def wrong_answer_response(update: telegram.Update, context: telegram.ext.CallbackContext):
    reset_correct_answers_series(update=update, context=context)
    update.message.reply_text(
        text=f'üî¥–ù–µ–≤–µ—Ä–Ω–æ.\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç - {get_random_translated_word(update=update, context=context)}',
        disable_notification=True)
    bot.generate_random_word(update=update, context=context)


def reset_correct_answers_series(update: telegram.Update, context: telegram.ext.CallbackContext):
    user_score = context.user_data[f'user_score: {update.message.from_user.id}']
    if 10 <= user_score.get_score() < 15:
        ran_num = random.randint(0, 2)
        match ran_num:
            case 0:
                update.message.reply_text(text=f'–î–∞, –∑–Ω–∞—é. –û–±–∏–¥–Ω–æ —Ç–µ—Ä—è—Ç—å —Ç–∞–∫—É—é —Å–µ—Ä–∏—é –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤.',
                                          disable_notification=True)
            case 1:
                update.message.reply_text(text=f'–ù–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π. –ë–µ–∑ –æ—à–∏–±–æ–∫ —ç—Ç–∏ —Å–ª–æ–≤–∞ —è–≤–Ω–æ –Ω–µ –≤—ã—É—á–∏—Ç—å.',
                                          disable_notification=True)
            case 2:
                update.message.reply_text(text=f'–ó–∞—Ç–æ —Ç–µ–ø–µ—Ä—å —Ç—ã —Ç–æ—á–Ω–æ –∑–∞–ø–æ–º–Ω–∏—à—å —ç—Ç–æ —Å–ª–æ–≤–æ.',
                                          disable_notification=True)
    elif 15 <= user_score.get_score() < 20:
        update.message.reply_text(text=f'–ì–ª–∞–≤–Ω–æ–µ –Ω–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–π—Å—è, —É —Ç–µ–±—è –≤—Å—ë –ø–æ–ª—É—á–∏—Ç—Å—è! –¢—ã –±—ã–ª –ø–æ—á—Ç–∏ —É —Ü–µ–ª–∏!.',
                                  disable_notification=True)

    context.user_data[f'user_score: {update.message.from_user.id}'].reset()
