import aiogram
import utils


async def send_progress_message(message: aiogram.types.Message):
    user_id = message.from_user.id
    achievements_text = await utils.misc.create_achievements_text(message=message)
    with utils.database.postgres_database as db:
        learned_words = await db.get_learned_words(user_id=user_id)
    if learned_words is None:
        await message.answer(text=f'üìú–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ —Ç–≤–æ–∏—Ö —Å–ª–æ–≤:\n\n'
                                  f'üï∏–ü—ã—Ç–∞—è—Å—å –Ω–∞–π—Ç–∏ —Ç–≤–æ–∏ —Å–ª–æ–≤–∞, —è —Å–¥–µ–ª–∞–ª–∞ –≤—ã–≤–æ–¥, —á—Ç–æ –∏—Ö –Ω–µ—Ç.',
                             disable_notification=True)
    else:
        await message.answer(text=f'üìú–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ —Ç–≤–æ–∏—Ö —Å–ª–æ–≤:\n\n{", ".join(sorted(learned_words))}.',
                             disable_notification=True)
    if not achievements_text:
        await message.answer(text=f'üèµ–í–∏—Ç—Ä–∏–Ω–∞ —Ç–≤–æ–∏—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π:\n\n'
                                  f'üï∏–í–∏–¥–∏–º–æ, –≤ –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è —Ç–≤–æ—è –≤–∏—Ç—Ä–∏–Ω–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø—É—Å—Ç—É–µ—Ç.',
                             disable_notification=True)
    else:
        await message.answer(text=f'üèµ–í–∏—Ç—Ä–∏–Ω–∞ —Ç–≤–æ–∏—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π:\n\n‚óè {achievements_text}',
                             disable_notification=True)


def register_progress_command_handlers(dp: aiogram.Dispatcher):
    dp.register_message_handler(callback=send_progress_message, commands=['progress'])
