import aiogram
import utils
import states


async def send_library_message(message: aiogram.types.Message):
    user_id = message.from_user.id
    medals_text = await utils.misc.create_medals_text(message=message)
    with utils.database.postgres_database as db:
        learned_words = db.get_learned_words(user_id=user_id)
    if learned_words is None:
        await message.answer(text=f'‚ùï–ß—Ç–æ-—Ç–æ —è –Ω–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ —Å–ª–æ–≤ –≤ —Ç–≤–æ–µ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–µ...',
                             disable_notification=True)
    else:
        await message.answer(text=f'üìú–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ —Ç–≤–æ–∏—Ö —Å–ª–æ–≤:\n{", ".join(sorted(learned_words))}.',
                             disable_notification=True)
    if medals_text:
        await message.answer(text=f'üèÜ–í–∏—Ç—Ä–∏–Ω–∞ —Ç–≤–æ–∏—Ö –º–µ–¥–∞–ª–µ–π:\n{medals_text}.',
                             disable_notification=True)
    else:
        await message.answer(text=f'‚ùï–í–∏–¥–∏–º–æ —É —Ç–µ–±—è –µ—â—ë –Ω–µ—Ç –º–µ–¥–∞–ª–µ–π...',
                             disable_notification=True)


def register_library_command_handlers(dp: aiogram.Dispatcher):
    dp.register_message_handler(callback=send_library_message, commands=['library'])
    dp.register_message_handler(callback=send_library_message, commands=['library'],
                                state=states.learn_words_steps.LearnWordsSteps.check_answer_correctness_state)
